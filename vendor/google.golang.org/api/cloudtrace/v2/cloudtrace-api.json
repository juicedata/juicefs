{
  "resources": {
    "projects": {
      "resources": {
        "traces": {
          "methods": {
            "batchWrite": {
              "path": "v2/{+name}/traces:batchWrite",
              "id": "cloudtrace.projects.traces.batchWrite",
              "description": "Sends new spans to Stackdriver Trace or updates existing traces. If the\nname of a trace that you send matches that of an existing trace, new spans\nare added to the existing trace. Attempt to update existing spans results\nundefined behavior. If the name does not match, a new trace is created\nwith given set of spans.",
              "request": {
                "$ref": "BatchWriteSpansRequest"
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Empty"
              },
              "parameters": {
                "name": {
                  "description": "Required. Name of the project where the spans belong. The format is\n`projects/PROJECT_ID`.",
                  "type": "string",
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/trace.append"
              ],
              "flatPath": "v2/projects/{projectsId}/traces:batchWrite"
            }
          },
          "resources": {
            "spans": {
              "methods": {
                "create": {
                  "description": "Creates a new Span.",
                  "request": {
                    "$ref": "Span"
                  },
                  "httpMethod": "PUT",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Span"
                  },
                  "parameters": {
                    "name": {
                      "description": "The resource name of the span in the following format:\n\n    projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project.\n[SPAN_ID] is a unique identifier for a span within a trace,\nassigned when the span is created.",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/traces/[^/]+/spans/[^/]+$",
                      "location": "path"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform",
                    "https://www.googleapis.com/auth/trace.append"
                  ],
                  "flatPath": "v2/projects/{projectsId}/traces/{tracesId}/spans/{spansId}",
                  "path": "v2/{+name}",
                  "id": "cloudtrace.projects.traces.spans.create"
                }
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "$.xgafv": {
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format."
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "description": "Data format for response.",
      "default": "json"
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "pp": {
      "location": "query",
      "description": "Pretty-print response.",
      "default": "true",
      "type": "boolean"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "bearer_token": {
      "description": "OAuth bearer token.",
      "type": "string",
      "location": "query"
    }
  },
  "version": "v2",
  "baseUrl": "https://cloudtrace.googleapis.com/",
  "servicePath": "",
  "description": "Send and retrieve trace data from Stackdriver Trace. Data is generated and available by default for all App Engine applications. Data from other applications can be written to Stackdriver Trace for display, reporting, and analysis.\n",
  "kind": "discovery#restDescription",
  "basePath": "",
  "revision": "20171003",
  "documentationLink": "https://cloud.google.com/trace",
  "id": "cloudtrace:v2",
  "discoveryVersion": "v1",
  "version_module": true,
  "schemas": {
    "MessageEvent": {
      "id": "MessageEvent",
      "description": "An event describing a message sent/received between Spans.",
      "type": "object",
      "properties": {
        "uncompressedSize": {
          "format": "uint64",
          "description": "The number of uncompressed bytes sent or received.",
          "type": "string"
        },
        "type": {
          "description": "Type of MessageEvent. Indicates whether the message was sent or\nreceived.",
          "type": "string",
          "enumDescriptions": [
            "Unknown event type.",
            "Indicates a sent message.",
            "Indicates a received message."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "SENT",
            "RECEIVED"
          ]
        },
        "compressedSize": {
          "format": "uint64",
          "description": "The number of compressed bytes sent or received. If missing assumed to\nbe the same size as uncompressed.",
          "type": "string"
        },
        "id": {
          "format": "uint64",
          "description": "An identifier for the message, which must be unique in this span.",
          "type": "string"
        }
      }
    },
    "StackFrame": {
      "properties": {
        "fileName": {
          "$ref": "TruncatableString",
          "description": "The name of the source file where the function call appears (up to 256\nbytes)."
        },
        "sourceVersion": {
          "$ref": "TruncatableString",
          "description": "The version of the deployed source code (up to 128 bytes)."
        },
        "originalFunctionName": {
          "$ref": "TruncatableString",
          "description": "An un-mangled function name, if `function_name` is\n[mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can\nbe fully-qualified (up to 1024 bytes)."
        },
        "functionName": {
          "description": "The fully-qualified name that uniquely identifies the function or\nmethod that is active in this frame (up to 1024 bytes).",
          "$ref": "TruncatableString"
        },
        "lineNumber": {
          "format": "int64",
          "description": "The line number in `file_name` where the function call appears.",
          "type": "string"
        },
        "loadModule": {
          "$ref": "Module",
          "description": "The binary module from where the code was loaded."
        },
        "columnNumber": {
          "format": "int64",
          "description": "The column number where the function call appears, if available.\nThis is important in JavaScript because of its anonymous functions.",
          "type": "string"
        }
      },
      "id": "StackFrame",
      "description": "Represents a single stack frame in a stack trace.",
      "type": "object"
    },
    "Link": {
      "description": "A pointer from the current span to another span in the same trace or in a\ndifferent trace. For example, this can be used in batching operations,\nwhere a single batch handler processes multiple requests from different\ntraces or when the handler receives a request from a different project.",
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "CHILD_LINKED_SPAN",
            "PARENT_LINKED_SPAN"
          ],
          "description": "The relationship of the current span relative to the linked span.",
          "type": "string",
          "enumDescriptions": [
            "The relationship of the two spans is unknown.",
            "The linked span is a child of the current span.",
            "The linked span is a parent of the current span."
          ]
        },
        "attributes": {
          "description": "A set of attributes on the link. There is a limit of 32 attributes per\nlink.",
          "$ref": "Attributes"
        },
        "traceId": {
          "description": "`TRACE_ID` identifies a trace within a project.",
          "type": "string"
        },
        "spanId": {
          "description": "`SPAN_ID` identifies a span within a trace.",
          "type": "string"
        }
      },
      "id": "Link"
    },
    "Annotation": {
      "properties": {
        "description": {
          "$ref": "TruncatableString",
          "description": "A user-supplied message describing the event. The maximum length for\nthe description is 256 bytes."
        },
        "attributes": {
          "description": "A set of attributes on the annotation. There is a limit of 4 attributes\nper Annotation.",
          "$ref": "Attributes"
        }
      },
      "id": "Annotation",
      "description": "Text annotation with a set of attributes.",
      "type": "object"
    },
    "StackFrames": {
      "description": "A collection of stack frames, which can be truncated.",
      "type": "object",
      "properties": {
        "droppedFramesCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of stack frames that were dropped because there\nwere too many stack frames.\nIf this value is 0, then no stack frames were dropped."
        },
        "frame": {
          "description": "Stack frames in this call stack.",
          "items": {
            "$ref": "StackFrame"
          },
          "type": "array"
        }
      },
      "id": "StackFrames"
    },
    "TimeEvents": {
      "description": "A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation\non the span, consisting of either user-supplied key:value pairs, or\ndetails of a message sent/received between Spans.",
      "type": "object",
      "properties": {
        "droppedAnnotationsCount": {
          "format": "int32",
          "description": "The number of dropped annotations in all the included time events.\nIf the value is 0, then no annotations were dropped.",
          "type": "integer"
        },
        "droppedMessageEventsCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of dropped message events in all the included time events.\nIf the value is 0, then no message events were dropped."
        },
        "timeEvent": {
          "description": "A collection of `TimeEvent`s.",
          "items": {
            "$ref": "TimeEvent"
          },
          "type": "array"
        }
      },
      "id": "TimeEvents"
    },
    "Module": {
      "description": "Binary module.",
      "type": "object",
      "properties": {
        "module": {
          "$ref": "TruncatableString",
          "description": "For example: main binary, kernel modules, and dynamic libraries\nsuch as libc.so, sharedlib.so (up to 256 bytes)."
        },
        "buildId": {
          "description": "A unique identifier for the module, usually a hash of its\ncontents (up to 128 bytes).",
          "$ref": "TruncatableString"
        }
      },
      "id": "Module"
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` that can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client."
        },
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "items": {
            "type": "object",
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            }
          },
          "type": "array"
        },
        "code": {
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer"
        }
      }
    },
    "BatchWriteSpansRequest": {
      "description": "The request message for the `BatchWriteSpans` method.",
      "type": "object",
      "properties": {
        "spans": {
          "description": "A collection of spans.",
          "items": {
            "$ref": "Span"
          },
          "type": "array"
        }
      },
      "id": "BatchWriteSpansRequest"
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object",
      "properties": {},
      "id": "Empty"
    },
    "Span": {
      "description": "A span represents a single operation within a trace. Spans can be\nnested to form a trace tree. Often, a trace contains a root span\nthat describes the end-to-end latency, and one or more subspans for\nits sub-operations. A trace can also contain multiple root spans,\nor none at all. Spans do not need to be contiguous&mdash;there may be\ngaps or overlaps between spans in a trace.",
      "type": "object",
      "properties": {
        "timeEvents": {
          "$ref": "TimeEvents",
          "description": "The included time events. There can be up to 32 annotations and 128 message\nevents per span."
        },
        "links": {
          "$ref": "Links",
          "description": "A maximum of 128 links are allowed per Span."
        },
        "attributes": {
          "$ref": "Attributes",
          "description": "A set of attributes on the span. There is a limit of 32 attributes per\nspan."
        },
        "spanId": {
          "description": "The [SPAN_ID] portion of the span's resource name.",
          "type": "string"
        },
        "childSpanCount": {
          "format": "uint32",
          "description": "An optional number of child spans that were generated while this span\nwas active. If set, allows implementation to detect missing child spans.",
          "type": "integer"
        },
        "sameProcessAsParentSpan": {
          "description": "A highly recommended but not required flag that identifies when a trace\ncrosses a process boundary. True when the parent_span belongs to the\nsame process as the current span.",
          "type": "boolean"
        },
        "status": {
          "$ref": "Status",
          "description": "An optional final status for this span."
        },
        "name": {
          "description": "The resource name of the span in the following format:\n\n    projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project.\n[SPAN_ID] is a unique identifier for a span within a trace,\nassigned when the span is created.",
          "type": "string"
        },
        "stackTrace": {
          "$ref": "StackTrace",
          "description": "Stack trace captured at the start of the span."
        },
        "parentSpanId": {
          "description": "The [SPAN_ID] of this span's parent span. If this is a root span,\nthen this field must be empty.",
          "type": "string"
        },
        "endTime": {
          "format": "google-datetime",
          "description": "The end time of the span. On the client side, this is the time kept by\nthe local machine where the span execution ends. On the server side, this\nis the time when the server application handler stops running.",
          "type": "string"
        },
        "startTime": {
          "format": "google-datetime",
          "description": "The start time of the span. On the client side, this is the time kept by\nthe local machine where the span execution starts. On the server side, this\nis the time when the server's application handler starts running.",
          "type": "string"
        },
        "displayName": {
          "$ref": "TruncatableString",
          "description": "A description of the span's operation (up to 128 bytes).\nStackdriver Trace displays the description in the\n{% dynamic print site_values.console_name %}.\nFor example, the display name can be a qualified method name or a file name\nand a line number where the operation is called. A best practice is to use\nthe same display name within an application and at the same call point.\nThis makes it easier to correlate spans in different traces."
        }
      },
      "id": "Span"
    },
    "AttributeValue": {
      "type": "object",
      "properties": {
        "intValue": {
          "format": "int64",
          "description": "A 64-bit signed integer.",
          "type": "string"
        },
        "boolValue": {
          "description": "A Boolean value represented by `true` or `false`.",
          "type": "boolean"
        },
        "stringValue": {
          "description": "A string up to 256 bytes long.",
          "$ref": "TruncatableString"
        }
      },
      "id": "AttributeValue",
      "description": "The allowed types for [VALUE] in a `[KEY]:[VALUE]` attribute."
    },
    "Attributes": {
      "id": "Attributes",
      "description": "A set of attributes, each in the format `[KEY]:[VALUE]`.",
      "type": "object",
      "properties": {
        "droppedAttributesCount": {
          "format": "int32",
          "description": "The number of attributes that were discarded. Attributes can be discarded\nbecause their keys are too long or because there are too many attributes.\nIf this value is 0 then all attributes are valid.",
          "type": "integer"
        },
        "attributeMap": {
          "description": "The set of attributes. Each attribute's key can be up to 128 bytes\nlong. The value can be a string up to 256 bytes, an integer, or the\nBoolean values `true` and `false`. For example:\n\n    \"/instance_id\": \"my-instance\"\n    \"/http/user_agent\": \"\"\n    \"/http/request_bytes\": 300\n    \"abc.com/myattribute\": true",
          "type": "object",
          "additionalProperties": {
            "$ref": "AttributeValue"
          }
        }
      }
    },
    "Links": {
      "id": "Links",
      "description": "A collection of links, which are references from this span to a span\nin the same or different trace.",
      "type": "object",
      "properties": {
        "droppedLinksCount": {
          "format": "int32",
          "description": "The number of dropped links after the maximum size was enforced. If\nthis value is 0, then no links were dropped.",
          "type": "integer"
        },
        "link": {
          "description": "A collection of links.",
          "items": {
            "$ref": "Link"
          },
          "type": "array"
        }
      }
    },
    "TruncatableString": {
      "type": "object",
      "properties": {
        "truncatedByteCount": {
          "format": "int32",
          "description": "The number of bytes removed from the original string. If this\nvalue is 0, then the string was not shortened.",
          "type": "integer"
        },
        "value": {
          "description": "The shortened string. For example, if the original string was 500\nbytes long and the limit of the string was 128 bytes, then this\nvalue contains the first 128 bytes of the 500-byte string. Note that\ntruncation always happens on the character boundary, to ensure that\ntruncated string is still valid UTF8. In case of multi-byte characters,\nsize of truncated string can be less than truncation limit.",
          "type": "string"
        }
      },
      "id": "TruncatableString",
      "description": "Represents a string that might be shortened to a specified length."
    },
    "StackTrace": {
      "description": "A call stack appearing in a trace.",
      "type": "object",
      "properties": {
        "stackFrames": {
          "$ref": "StackFrames",
          "description": "Stack frames in this stack trace. A maximum of 128 frames are allowed."
        },
        "stackTraceHashId": {
          "format": "uint64",
          "description": "The hash ID is used to conserve network bandwidth for duplicate\nstack traces within a single trace.\n\nOften multiple spans will have identical stack traces.\nThe first occurrence of a stack trace should contain both the\n`stackFrame` content and a value in `stackTraceHashId`.\n\nSubsequent spans within the same request can refer\nto that stack trace by only setting `stackTraceHashId`.",
          "type": "string"
        }
      },
      "id": "StackTrace"
    },
    "TimeEvent": {
      "description": "A time-stamped annotation or message event in the Span.",
      "type": "object",
      "properties": {
        "annotation": {
          "description": "Text annotation with a set of attributes.",
          "$ref": "Annotation"
        },
        "messageEvent": {
          "description": "An event describing a message sent/received between Spans.",
          "$ref": "MessageEvent"
        },
        "time": {
          "format": "google-datetime",
          "description": "The timestamp indicating the time the event occurred.",
          "type": "string"
        }
      },
      "id": "TimeEvent"
    }
  },
  "protocol": "rest",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "canonicalName": "Cloud Trace",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/trace.append": {
          "description": "Write Trace data for a project or application"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "rootUrl": "https://cloudtrace.googleapis.com/",
  "ownerDomain": "google.com",
  "name": "cloudtrace",
  "batchPath": "batch",
  "fullyEncodeReservedExpansion": true,
  "title": "Stackdriver Trace API",
  "ownerName": "Google"
}
