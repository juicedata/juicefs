name: 'Vdbench Action'
description: 'Vdbench Action'
inputs:
  meta_url:  
    description: 'meta url'
    required: true
    default: 'redis://localhost/1'
  storage:  
    description: 'storage'
    required: true
    default: 'minio'
  bucket:  
    description: 'bucket'
    required: true
    default: 'http://localhost:9000/vdbench-test'
  access_key:  
    description: 'access_key'
    required: true
    default: 'minioadmin'
  secret_key:  
    description: 'secret_key'
    required: true
    default: 'minioadmin'
  volume_name: 
    description: 'volume name'
    required: true
    default: 'vdbench-test'
  mount_point: 
    description: 'mount_point'
    required: true
    default: '/tmp/vdbench'
  version_count:
    description: 'how many version to test besides dev'
    required: true
    default: 1
  mysql_password:
    description: 'mysql password'
    required: true
    default: ''
  PYROSCOPE_AUTH_TOKEN:
    description: 'PYROSCOPE_AUTH_TOKEN'
    required: true
    default: ''

runs:
  using: "composite"
  steps:
    - name: Install tools
      shell: bash
      run: |
        wget -q https://dl.minio.io/client/mc/release/linux-amd64/mc
        chmod +x mc 
        wget -q https://s.juicefs.com/static/bench/vdbench50407.zip
        unzip vdbench50407.zip -d vdbench
        [[ ${{ inputs.meta_url }} == redis://* ]] && docker run --name my-redis -p 6379:6379 -d redis
        [[ ${{ inputs.storage }} == minio ]] && docker run -d -p 9000:9000 --name minio \
                     -e "MINIO_ACCESS_KEY=minioadmin" \
                     -e "MINIO_SECRET_KEY=minioadmin" \
                     -v /tmp/data:/data \
                     -v /tmp/config:/root/.minio \
                     minio/minio server /data
      
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.18.x'

    - name: Build linux target
      shell: bash
      run: |
        make juicefs
      
    - name: vdbench-big 
      shell: bash
      run: | 
        ./juicefs format ${{inputs.meta_url}} vdbench-big
        ./juicefs mount -d ${{inputs.meta_url}} ${{ inputs.mount_point }}
        vdbench/vdbench -f ./.github/workflows/resources/vdbench_big_file.conf

    - uses: actions/upload-artifact@v3
      with:
        name: output-big
        path: output

    - name: clean
      shell: bash
      run: |
        rm /var/jfsCache/ -rf || true
        if [ -d ${{ inputs.mount_point }} ]; then
          ./juicefs umount ${{ inputs.mount_point }} || true
        fi
        uuid=$(./juicefs status ${{ inputs.meta_url }} | grep UUID | cut -d '"' -f 4) || true
        if [ -n "$uuid" ];then
          sudo ./juicefs destroy --force ${{ inputs.meta_url }} $uuid
        fi

    - name: vdbench-small
      shell: bash
      run: |
        ./juicefs format ${{inputs.meta_url}} vdbench-small
        ./juicefs mount -d ${{inputs.meta_url}} ${{ inputs.mount_point }}        
        vdbench/vdbench -f ./.github/workflows/resources/vdbench_small_file.conf

    - uses: actions/upload-artifact@v3
      with:
        name: output-small
        path: output

    - name: log
      if: ${{ always() }}
      shell: bash
      run: | 
        tail -300 ~/.juicefs/juicefs.log
        grep "<FATAL>:" ~/.juicefs/juicefs.log && exit 1 || true