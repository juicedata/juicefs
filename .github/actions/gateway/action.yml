name: 'JuiceFS Gateway Action'
description: 'JuiceFS gateway action'
inputs:
  meta_url:  
    description: 'meta url'
    required: true
    default: ''
  file_count:  
    description: 'count of files to upload to gateway'
    required: true
    default: '100'
  file_size:
    description: 'size of each file in human read format, eg 1K, 1M, 1G.'
    required: true
    default: '4K'
  threads:
    description: 'thread number for juicefs sync command'
    required: true
    default: 10
  isolation_level:
    description: 'isolation level for mysql, include read uncommitted, read committed, repeatable read, serializable'
    required: true
    default: "repeatable read"
  mount_point:
    description: 'mount point'
    required: true
    default: /tmp/myjfs
  volume_name:
    description: 'volume name'
    required: true
    default: myjfs
  
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.18.x'

    - name: Build linux target
      run: |
        #if it is self ruuner
        hostname | grep bench && export GOPATH=/usr/local/go && export HOME=/root
        make juicefs 
        #wget -q https://github.com/juicedata/juicefs/releases/download/v1.0.0-beta3/juicefs-1.0.0-beta3-linux-amd64.tar.gz
        #tar -xzf juicefs-1.0.0-beta3-linux-amd64.tar.gz
      shell: bash

    - name: Install tools
      run: | 
        wget -q https://dl.minio.io/client/mc/release/linux-amd64/mc
        chmod +x mc 
      shell: bash

    - name: Init
      shell: bash
      run: | 
        set -x
        mp=${{inputs.mount_point}}
        meta_url=${{inputs.meta_url}}
        volume=${{inputs.volume_name}}
        test -d $mp && ./juicefs umount -f $mp
        ./juicefs status $meta_url && UUID=$(./juicefs status $meta_url | grep UUID | cut -d '"' -f 4) || echo "meta not exist"
        if [ -n "$UUID" ];then
          ./juicefs destroy --force $meta_url $UUID
        fi
        test -d /var/jfs/$volume && rm -rf /var/jfs/$volume || true
        echo finished
      
    - name: create database
      shell: bash
      run: | 
        meta_url=${{inputs.meta_url}}
        isolation_level="${{inputs.isolation_level}}"
        db_name=$(basename $meta_url | awk -F? '{print $1}')
        if [[ "$meta_url" == mysql* ]]; then
          user=$(echo $meta_url |  awk -F/ '{print $3}' | awk -F@ '{print $1}' | awk -F: '{print $1}')
          password=$(echo $meta_url |  awk -F/ '{print $3}' | awk -F@ '{print $1}' | awk -F: '{print $2}')
          test -n "$password" && password="-p$password" || password=""
          host=$(basename $(dirname $meta_url) | awk -F@ '{print $2}'| sed 's/(//g' | sed 's/)//g' | awk -F: '{print $1}')
          port=$(basename $(dirname $meta_url) | awk -F@ '{print $2}'| sed 's/(//g' | sed 's/)//g' | awk -F: '{print $2}')
          test -z "$port" && port="3306"
          mysql -u$user $password -h $host -P $port -e "set global transaction isolation level $isolation_level;" 
          mysql -u$user $password -h $host -P $port -e "show variables like '%isolation%;'" 
          mysql -u$user $password -h $host -P $port -e "drop database if exists $db_name; create database $db_name;" 
        elif [[ "$meta_url" == postgres* ]]; then
          export PGPASSWORD="postgres"
          printf "\set AUTOCOMMIT on\ndrop database if exists $db_name; create database $db_name; " |  psql -U postgres -h localhost
          printf "\set AUTOCOMMIT on\nALTER DATABASE $db_name SET DEFAULT_TRANSACTION_ISOLATION TO '$isolation_level';" |  psql -U postgres -h localhost
        fi      
      
    - name: start gateway
      shell: bash
      run: |
        meta_url=${{inputs.meta_url}}
        mp=${{inputs.mount_point}}
        volume=${{inputs.volume_name}}
        export MINIO_ROOT_USER=minioadmin
        export MINIO_ROOT_PASSWORD=minioadmin
        ./juicefs format $meta_url $volume --trash-days 0
        if [[ "$meta_url" == badger* ]]; then
          ./juicefs gateway $meta_url localhost:8080 --no-usage-report /tmp/access1.log &
        else
          ./juicefs gateway $meta_url localhost:8080 --access-log /tmp/access1.log &
          #./juicefs gateway $meta_url localhost:9000 --access-log /tmp/access1.log &
          #./juicefs gateway $meta_url localhost:9001 --access-log /tmp/access2.log &
          #sudo cp .github/workflows/resources/load-balancer.conf /etc/nginx/conf.d/load-balancer.conf
          #sudo rm /etc/nginx/sites-enabled/default
          #sudo systemctl restart nginx
        fi
      
    - name: Sync with multiple process
      shell: bash
      run: |
        meta_url=${{inputs.meta_url}}
        file_size=${{inputs.file_size}}
        file_count=${{inputs.file_count}}
        threads=${{inputs.threads}}
        mp=${{inputs.mount_point}}
        volume=${{inputs.volume_name}}
        
        dd if=/dev/urandom of=file iflag=fullblock,count_bytes bs=4k count="$file_size" > /dev/null
        mkdir data
        for i in $(seq 1 $file_count); do
          cp file data/file$i
        done
        start=`date +%s`
        declare -a pids   
        ./juicefs sync --dirs data/  s3://minioadmin:minioadmin@localhost:8080/$volume/data/ --no-https -p $threads &
        pids+=($!)
        ./juicefs sync --dirs data/  s3://minioadmin:minioadmin@localhost:8080/$volume/data/ --no-https -p $threads &
        pids+=($!)
        ./juicefs sync --dirs data/  s3://minioadmin:minioadmin@localhost:8080/$volume/data/ --no-https -p $threads &
        pids+=($!)
        wait "${pids[@]}"
        rm -rf $HOME/.juicefs/cache/ || true
        # ./mc alias set minio http://localhost:9000 minioadmin minioadmin --api S3v4
        # ./mc mb minio/$volume
        # ./mc cp --recursive data/  minio/$volume/data
        end=`date +%s`
        time=$((end-start))
        echo time cost is: $time second
        killall juicefs 
        sleep 3
        ./juicefs mount -d $meta_url $mp
        diff -ur data/ $mp/data/ 
        echo "diff succeed"
        ./juicefs umount  $mp --force
      
    - name: Sync with empty dir
      run: |
        meta_url=${{inputs.meta_url}}
        threads=${{inputs.threads}}
        mp=${{inputs.mount_point}}
        volume=${{inputs.volume_name}}
        export MINIO_ROOT_USER=minioadmin
        export MINIO_ROOT_PASSWORD=minioadmin
        ./juicefs mdtest $meta_url test --dirs 10 --depth 2 --files 10 --threads 10 --no-usage-report
        ./juicefs gateway $meta_url localhost:8080 --access-log /tmp/access1.log &
        sleep 10
        mkdir emptydir
        declare -a pids  
        ./juicefs sync emptydir/ s3://minioadmin:minioadmin@localhost:8080/$volume/test/ --delete-dst --no-https -p $threads &
        pids+=($!)
        ./juicefs sync emptydir/ s3://minioadmin:minioadmin@localhost:8080/$volume/test/ --delete-dst --no-https -p $threads &
        pids+=($!)
        ./juicefs sync emptydir/ s3://minioadmin:minioadmin@localhost:8080/$volume/test/ --delete-dst --no-https -p $threads &
        pids+=($!)
        wait "${pids[@]}"
        killall juicefs
        sleep 3
        ./juicefs mount -d $meta_url $mp
        [ -d "$mp/test/" ] && exit 1 
        ./juicefs umount  $mp --force
      shell: bash

    - name: log
      if: ${{ always() }}
      shell: bash
      run: | 
        tail -300 ~/.juicefs/juicefs.log
        grep "<FATAL>:" ~/.juicefs/juicefs.log && exit 1 || true