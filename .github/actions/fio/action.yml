name: 'Fio Test Action'
description: 'Fio Test Action'
inputs:
  meta_url:  
    description: 'meta url'
    required: true
    default: 'redis://localhost/1'
  storage:  
    description: 'storage'
    required: true
    default: 'minio'
  bucket:  
    description: 'bucket'
    required: true
    default: 'http://localhost:9000/fio-test'
  access_key:  
    description: 'access_key'
    required: true
    default: 'minioadmin'
  secret_key:  
    description: 'secret_key'
    required: true
    default: 'minioadmin'
  volume_name: 
    description: 'volume name'
    required: true
    default: 'fio-test'
  mount_point: 
    description: 'mount_point'
    required: true
    default: '/tmp/fio-test'
  fio_job: 
    description: 'fio job, include name, options and mount args'
    required: true
    default: 
  version_count:
    description: 'how many version to test besides dev'
    required: true
    default: 1
  mysql_password:
    description: 'mysql password'
    required: true
    default: ''
  PYROSCOPE_AUTH_TOKEN:
    description: 'PYROSCOPE_AUTH_TOKEN'
    required: true
    default: ''

runs:
  using: "composite"
  steps:
    - name: Install tools
      run: |
        set -x 
        sudo apt install fio
        wget -q https://dl.minio.io/client/mc/release/linux-amd64/mc
        chmod +x mc 
        [[ ${{ inputs.meta_url }} == redis://* ]] && docker run --name my-redis -p 6379:6379 -d redis
        [[ ${{ inputs.storage }} == minio ]] && docker run -d -p 9000:9000 --name minio \
                     -e "MINIO_ACCESS_KEY=minioadmin" \
                     -e "MINIO_SECRET_KEY=minioadmin" \
                     -v /tmp/data:/data \
                     -v /tmp/config:/root/.minio \
                     minio/minio server /data
      shell: bash

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.18.x'

    - name: Build linux target
      run: |
        make juicefs
      shell: bash

    - name: Clean Before
      run: |
        rm /var/jfsCache/ -rf || true
        if [ -d ${{ inputs.mount_point }} ]; then
          ./juicefs umount ${{ inputs.mount_point }} || true
        fi
        uuid=$(./juicefs status ${{ inputs.meta_url }} | grep UUID | cut -d '"' -f 4) || true
        if [ -n "$uuid" ];then
          sudo ./juicefs destroy --force ${{ inputs.meta_url }} $uuid
        fi
      shell: bash
    - name: Fio Benchmark 
      run: |
        PYROSCOPE_URL=http://172.27.0.1:4040
        export PYROSCOPE_AUTH_TOKEN=${{inputs.PYROSCOPE_AUTH_TOKEN}}
        urls=("juicefs")
        urls+=($(curl -s https://api.github.com/repos/juicedata/juicefs/releases | grep browser_download_url | grep linux-amd64.tar.gz | awk -F\" '{print $4}' | head -${{inputs.version_count}}))         
        for url in "${urls[@]}"; do
          if [[ $url == http* ]]; then  
            wget -q $url
            bin_name=$(echo $(basename $url) | sed 's/.tar.gz//g')
            mkdir jfs || true
            tar -zxf $(basename $url) -C jfs
            mv jfs/juicefs $bin_name
            rm $(basename $url)
            rm jfs -rf
          fi
        done
        job="${{inputs.fio_job}}"
        set -x
        for url in "${urls[@]}"; do
          echo version: $(./$bin_name -V), job: $job,  
          bin_name=$(echo $(basename $url) | sed 's/.tar.gz//g') 
          juicefs_version=$(./$bin_name -V|cut -b 17- | sed 's/:/-/g')
          name=$(echo $job | awk -F: '{print $1}' | xargs)
          fio_arg=$(echo $job | awk -F: '{print $2}' | xargs)
          mount_arg=$(echo $job | awk -F: '{print $3}' | xargs)
          ./$bin_name format --help | grep "trash-days" && trash_day="--trash-days 0" || trash_day=""
          ./$bin_name --help | grep "pyroscope" && pyroscope="--pyroscope $PYROSCOPE_URL" || pyroscope=""
          ./$bin_name format $trash_day --storage ${{inputs.storage}} --bucket  ${{inputs.bucket}}  --access-key ${{inputs.access_key}} --secret-key ${{inputs.secret_key}}  ${{inputs.meta_url}} ${{inputs.volume_name}}
          ./$bin_name mount -d ${{ inputs.meta_url }} ${{ inputs.mount_point }} --no-usage-report $pyroscope  $mount_arg
          if [[ "$name" =~ ^big-file-rand-read.* ]]; then
            block_size=$(echo $name | awk -F- '{print $NF}' | xargs)
            echo block_size is $block_size
            fio --name=big-file-rand-read-preload --directory=${{ inputs.mount_point }} --rw=randread --refill_buffers --size=1G --filename=randread.bin --bs=$block_size --pre_read=1
            sudo sync 
            sudo bash -c  "echo 3 > /proc/sys/vm/drop_caches"
          fi
          echo "start fio"
          fio --name=$name --directory=${{ inputs.mount_point }} $fio_arg > "$name-$juicefs_version.log"
          echo "finish fio"
          bw_str=$(tail -1 $name-$juicefs_version.log | awk '{print $2}' | awk -F '=' '{print $2}' )
          bw=$(echo $bw_str | sed 's/.iB.*//g') 
          if [[ $bw_str == *KiB* ]]; then
            bw=$(echo "scale=2; $bw/1024.0" | bc -l)
          elif [[ $bw_str == *GiB* ]]; then
            bw=$(echo "scale=2; $bw*1024.0" | bc -l)
          fi
          meta=`echo ${{inputs.meta_url}} | awk -F: '{print $1}'`
          hostname | grep bench  && runner="self_runner" || runner='github_runner'
          mysql -h 8.210.231.144 -u juicedata -p${{inputs.mysql_password}} -e "use  test_result;  INSERT INTO fio_test (name, bandwidth,  juicefs_version, size, nrfiles, ref_name, created_date, github_revision, workflow_url, meta_engine, storage, runner) values ('$name', $bw, '$juicefs_version', '1G', 10000, '${{ github.ref_name }}', '$(date +"%Y-%m-%d %H:%M:%S")', '${{github.sha}}', 'https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}',  '$meta', '${{inputs.storage}}', '$runner'); "
          ./$bin_name umount -f ${{ inputs.mount_point }}
          uuid=$(./juicefs status ${{ inputs.meta_url }} | grep UUID | cut -d '"' -f 4)
          if [ -n "$uuid" ];then
            sudo ./juicefs destroy --force ${{ inputs.meta_url }} $uuid
          fi
          # mc rb  myminio/$name --force --dangerous || printf "Warining; remove bucket failed: %s, exit code: %s" "myminio/$name" "$?"
        done
        # mysql -h 8.210.231.144 -u juicedata -p${{inputs.mysql_password}} -e "use  test_result; LOAD DATA INFILE '/var/lib/mysql-files/result.csv' INTO TABLE fio_test FIELDS TERMINATED BY ',' (name, bandwidth,  juicefs_version, size, nrfiles, ref_name, created_date, github_revision, workflow_url, meta_engine, storage, runner); " 
      shell: bash

    - name: log
      if: ${{ always() }}
      shell: bash
      run: | 
        if [ -f ~/.juicefs/juicefs.log ]; then
          tail -300 ~/.juicefs/juicefs.log
          grep "<FATAL>:" ~/.juicefs/juicefs.log && exit 1 || true
        fi