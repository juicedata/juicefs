name: "version-compatible-test-hypo"

on:
  schedule:
    - cron:  '0 16 * * *'
  workflow_dispatch:

jobs:
  vc-hypo:
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        old_juicefs_version: ['1.0.0', '1.0.0-rc1',  '1.0.0-beta1']
        meta: ['redis', 'mysql']
        include:
          - os: macos-latest
            old_juicefs_version: '1.0.0'
            meta: 'redis'
          - os: ubuntu-latest
            old_juicefs_version: '0.17.1'
            meta: 'redis'
          - os: ubuntu-latest
            old_juicefs_version: '1.0.0'
            meta: 'tikv'
          - os: ubuntu-latest
            old_juicefs_version: '1.0.0'
            meta: 'postgres'
          - os: ubuntu-latest
            old_juicefs_version: '1.0.0'
            meta: 'sqlite3'
          - os: ubuntu-latest
            old_juicefs_version: '1.0.0'
            meta: 'badger'

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18.x'

      - name: Prepare meta database
        run: | 
          meta=${{matrix.meta}}
          if [[ "$meta" == redis ]]; then
            meta_url='redis://localhost/1'
            sudo apt-get install -y redis-tools redis-server
          elif [[ "$meta" == mysql ]]; then
            sudo /etc/init.d/mysql start
          elif [[ "$meta" == postgres ]]; then
            sudo service postgresql start
          elif [[ "$meta" == tikv ]]; then
            curl --proto '=https' --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh
            source /home/runner/.bash_profile
            source /home/runner/.profile
            tiup playground --mode tikv-slim &
            git clone https://github.com/c4pt0r/tcli
            cd tcli && make
            sudo cp bin/tcli /usr/local/bin
            cd -
          elif [[ "$meta" == badger ]]; then
            sudo go get github.com/dgraph-io/badger/v3
          elif [[ "$meta" == mariadb ]]; then
            docker run -p 127.0.0.1:3306:3306  --name mdb -e MARIADB_ROOT_PASSWORD=root -d mariadb:latest
          fi

      - name: Download old version
        run: | 
          filename=juicefs-${{matrix.old_juicefs_version}}-linux-amd64.tar.gz
          echo filename is: $filename
          url=$(curl -s https://api.github.com/repos/juicedata/juicefs/releases | grep browser_download_url | grep $filename | awk -F\" '{print $4}' | head -1)
          echo download url is: $url
          wget -q $url
          tar -zxf $filename
          mv juicefs juicefs-${{matrix.old_juicefs_version}}

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Make Juicefs
        shell: bash
        run: | 
          make juicefs
          
      - name: Setup minio
        shell: bash
        run: |
          docker run -d -p 9000:9000 --name minio \
                      -e "MINIO_ACCESS_KEY=minioadmin" \
                      -e "MINIO_SECRET_KEY=minioadmin" \
                      -v /tmp/data:/data \
                      -v /tmp/config:/root/.minio \
                      minio/minio server /data
          
      - name: Install tools
        run: | 
          wget -q https://dl.minio.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          sudo mv mc /usr/local/bin
          sudo apt install redis-tools
          sudo pip install hypothesis
          sudo pip install minio
          
      - name: Test
        run: |
          meta=${{matrix.meta}}
          if [[ "$meta" == redis ]]; then
            export META_URL=redis://localhost/1
          elif [[ "$meta" == mysql ]]; then
            export META_URL=mysql://root:root@\(127.0.0.1\)/test
          elif [[ "$meta" == postgres ]]; then
            export META_URL=postgres://postgres:postgres@127.0.0.1:5432/test?sslmode=disable
          elif [[ "$meta" == tikv ]]; then
            export META_URL=tikv://127.0.0.1:2379
          elif [[ "$meta" == sqlite3 ]]; then
            export META_URL=sqlite3://test.db
          elif [[ "$meta" == badger ]]; then
            export META_URL=badger://badger-data
          elif [[ "$meta" == mariadb ]]; then
            export META_URL=mysql://root:root@\(127.0.0.1\)/test
          fi
          
          export STORAGE='minio'
          version=`./juicefs version | awk -F" " '{print $3}' | awk -F+ '{print $1}'`
          mv juicefs juicefs-$version
          export NEW_JFS_BIN="juicefs-$version"
          export OLD_JFS_BIN="juicefs-${{matrix.old_juicefs_version}}"
          export PGPASSWORD="postgres"
          # python3 .github/scripts/test_action_log.py
          python3 .github/scripts/testVersionCompatible.py

      - name: Upload command log
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.os}}-${{matrix.meta}}-${{matrix.old_juicefs_version}}.command.log
          path: command.log

      - name: Display log
        if: ${{ always() }}
        shell: bash
        run: | 
          if [ -f "/home/runner/.juicefs/juicefs.log" ]; then
            cat /home/runner/.juicefs/juicefs.log
            grep "<FATAL>:" /home/runner/.juicefs/juicefs.log && exit 1 || true
          fi

      - name: Display command
        if: ${{ always() }}
        shell: bash
        run: | 
          if [ -f "command.log" ]; then
            tail -100 command.log
          fi

      - name: Send Slack Notification
        if: ${{ failure() }}
        uses: juicedata/slack-notify-action@main
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID_FOR_PR_CHECK_NOTIFY }}"
          slack_bot_token: "${{ secrets.SLACK_BOT_TOKEN }}"  

      - name: Setup upterm session
        if: ${{ failure() }}
        timeout-minutes: 1
        uses: lhotari/action-upterm@v1