name: "version-compatible-test-hypo"

on:
  schedule:
    - cron:  '0 0 * * *'
  workflow_dispatch:

jobs:
  vc-hypo:
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        old_juicefs_version: ['1.0.0', '1.0.0-rc2']
        meta_url: ['redis://localhost/1', 'mysql://root:root@\(127.0.0.1\)/test', 'postgres://postgres:postgres@127.0.0.1:5432/test?sslmode=disable']

    runs-on: ubuntu-latest
    services:
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18.x'

      - name: Create database
        run: | 
          meta_url=${{matrix.meta_url}}
          db_name=$(basename $meta_url | awk -F? '{print $1}')
          if [[ "$meta_url" == mysql* ]]; then
            sudo /etc/init.d/mysql start
            sleep 3
            user=$(echo $meta_url |  awk -F/ '{print $3}' | awk -F@ '{print $1}' | awk -F: '{print $1}')
            password=$(echo $meta_url |  awk -F/ '{print $3}' | awk -F@ '{print $1}' | awk -F: '{print $2}')
            test -n "$password" && password="-p$password" || password=""
            host=$(basename $(dirname $meta_url) | awk -F@ '{print $2}'| sed 's/(//g' | sed 's/)//g' | awk -F: '{print $1}')
            port=$(basename $(dirname $meta_url) | awk -F@ '{print $2}'| sed 's/(//g' | sed 's/)//g' | awk -F: '{print $2}')
            test -z "$port" && port="3306"
            mysql -u$user $password -h $host -P $port -e "drop database if exists $db_name; create database $db_name;" 
          elif [[ "$meta_url" == postgres* ]]; then
            export PGPASSWORD="postgres"
            printf "\set AUTOCOMMIT on\ndrop database if exists $db_name; create database $db_name; " |  psql -U postgres -h localhost
          fi

      - name: Download old version
        run: | 
          filename=juicefs-${{matrix.old_juicefs_version}}-linux-amd64.tar.gz
          echo filename is: $filename
          url=$(curl -s https://api.github.com/repos/juicedata/juicefs/releases | grep browser_download_url | grep $filename | awk -F\" '{print $4}' | head -1)
          echo download url is: $url
          wget -q $url
          tar -zxf $filename
          mv juicefs juicefs-${{matrix.old_juicefs_version}}

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Make Juicefs
        shell: bash
        run: | 
          make juicefs
          
      - name: Setup minio
        shell: bash
        run: |
          docker run -d -p 9000:9000 --name minio \
                      -e "MINIO_ACCESS_KEY=minioadmin" \
                      -e "MINIO_SECRET_KEY=minioadmin" \
                      -v /tmp/data:/data \
                      -v /tmp/config:/root/.minio \
                      minio/minio server /data
          
      - name: Install tools
        run: | 
          wget -q https://dl.minio.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          sudo mv mc /usr/local/bin
          sudo apt install redis-tools
          sudo pip install hypothesis
          sudo pip install minio
          
      - name: Test
        run: |
          export META_URL=${{matrix.meta_url}}
          export STORAGE='minio'
          version=`./juicefs version | awk -F" " '{print $3}' | awk -F+ '{print $1}'`
          mv juicefs juicefs-$version
          export NEW_JFS_BIN="juicefs-$version"
          export OLD_JFS_BIN="juicefs-${{matrix.old_juicefs_version}}"

          # python3 .github/scripts/test_action_log.py
          python3 .github/scripts/testVersionCompatible.py

      - name: Upload command log
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: command.log
          path: command.log

      - name: Display log
        if: ${{ always() }}
        shell: bash
        run: | 
          if [ -f "/home/runner/.juicefs/juicefs.log" ]; then
            cat /home/runner/.juicefs/juicefs.log
            grep "<FATAL>:" /home/runner/.juicefs/juicefs.log && exit 1 || true
          fi

      - name: Display command
        if: ${{ always() }}
        shell: bash
        run: | 
          if [ -f "command.log" ]; then
            tail -100 command.log
          fi

      - name: Send Slack Notification
        if: ${{ failure() }}
        uses: juicedata/slack-notify-action@main
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID_FOR_PR_CHECK_NOTIFY }}"
          slack_bot_token: "${{ secrets.SLACK_BOT_TOKEN }}"  