name: "dump_load"
on:
  push:
    branches:
      - 'main'
      - 'release-**'
    paths:
      - '**/dump_load.yml'
      - '**/dump_load.sh'
  pull_request:
    branches:
      - 'main'
      - 'release-**'
    paths:
      - '**/dump_load.yml'
      - '**/dump_load.sh'
  schedule:
    - cron:  '0 19 * * *'
  workflow_dispatch:
    inputs:
      debug:
        type: boolean
        description: "Run the build with tmate debugging enabled"
        required: false
        default: false

jobs:
  build-matrix:
    runs-on: ubuntu-20.04
    steps:
      - id: set-matrix
        run: |
          echo "github.event_name is ${{github.event_name}}"
          echo "GITHUB_REF_NAME is ${GITHUB_REF_NAME}"
          if [ "${{github.event_name}}" == "schedule"  ] || [ "${{github.event_name}}" == "workflow_dispatch"  ]; then
            echo 'meta_matrix=["sqlite3", "redis", "mysql", "tikv", "tidb", "postgres", "mariadb", "fdb"]' >> $GITHUB_OUTPUT
          else
            echo 'meta_matrix=["redis", "sqlite3", "tikv"]' >> $GITHUB_OUTPUT
          fi
    outputs:
      meta_matrix: ${{ steps.set-matrix.outputs.meta_matrix }}

  dump_load:
    timeout-minutes: 90
    needs: [build-matrix]
    strategy:
      fail-fast: false
      matrix:
        meta: ${{ fromJson(needs.build-matrix.outputs.meta_matrix) }}

    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: mount coverage dir
        timeout-minutes: 5
        uses: ./.github/actions/mount-coverage-dir
        with:
          mount_point: cover
          access_key: ${{ secrets.CI_COVERAGE_AWS_AK }}
          secret_key: ${{ secrets.CI_COVERAGE_AWS_SK }}
          token: ${{ secrets.CI_COVERAGE_AWS_TOKEN }}

      - name: Set Variable
        id: vars
        run: |
          if [ "${{matrix.meta}}" == "fdb" ]; then
            echo "target=juicefs.fdb" >> $GITHUB_OUTPUT
          else
            echo "target=juicefs" >> $GITHUB_OUTPUT
          fi

      - name: Build
        timeout-minutes: 10
        uses: ./.github/actions/build
        with: 
          target: ${{steps.vars.outputs.target}}

      - name: Install nodejs
        run: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
          nvm install 22
          nvm use 22
          node -v 
          nvm current

      - name: Download Random Test
        run: |
          wget https://juicefs-com-static.oss-cn-shanghai.aliyuncs.com/random-test/random-test
          chmod +x random-test

      - name: Test Load & Dump with Binary
        timeout-minutes: 30
        continue-on-error: true
        run: |
          sudo BINARY=true GOCOVERDIR=$(pwd)/cover META=${{matrix.meta}} .github/scripts/command/dump_load.sh

      - name: Test Load & Dump with Json Fast Mode
        timeout-minutes: 30
        run: |
          sudo FAST=true GOCOVERDIR=$(pwd)/cover META=${{matrix.meta}} .github/scripts/command/dump_load.sh  

      - name: Test Load & Dump with Json
        timeout-minutes: 30
        run: |
          sudo GOCOVERDIR=$(pwd)/cover META=${{matrix.meta}} .github/scripts/command/dump_load.sh     

      - name: log
        if: always()
        run: | 
          tail -500 /var/log/juicefs.log
          grep "<FATAL>:" /var/log/juicefs.log && exit 1 || true

      - name: upload coverage report
        timeout-minutes: 5
        continue-on-error: true
        uses: ./.github/actions/upload-coverage
        with:
          UPLOAD_TOKEN: ${{ secrets.CI_COVERAGE_FILE_UPLOAD_AUTH_TOKEN }}

      - name: Setup upterm session
        if: failure() && (github.event.inputs.debug == 'true' || github.run_attempt != 1)
        # if: failure()
        timeout-minutes: 60
        uses: lhotari/action-upterm@v1

  success-all-test:
    runs-on: ubuntu-latest
    needs: [dump_load]
    if: always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v3
      - uses: actions/checkout@v3

      - name: Check Failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1

      - name: mount coverage dir
        timeout-minutes: 5
        uses: ./.github/actions/mount-coverage-dir
        with:
          mount_point: cover
          access_key: ${{ secrets.CI_COVERAGE_AWS_AK }}
          secret_key: ${{ secrets.CI_COVERAGE_AWS_SK }}
          token: ${{ secrets.CI_COVERAGE_AWS_TOKEN }}

      - name: upload total coverage report
        timeout-minutes: 30
        continue-on-error: true
        uses: ./.github/actions/upload-total-coverage
        with:
          UPLOAD_TOKEN: ${{ secrets.CI_COVERAGE_FILE_UPLOAD_AUTH_TOKEN }}

      - name: Send Slack Notification
        if: failure() && github.event_name != 'workflow_dispatch' 
        uses: juicedata/slack-notify-action@main
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID_FOR_PR_CHECK_NOTIFY }}"
          slack_bot_token: "${{ secrets.SLACK_BOT_TOKEN }}"

      - name: Success
        if: success()
        run: echo "All Done"
        