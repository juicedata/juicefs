name: "load-test"
on:
  schedule:
    - cron:  '0 16 * * *'
  workflow_dispatch:

jobs:
  load:
    strategy:
      fail-fast: false
      matrix:
        meta: [ 'tidb', 'sqlite3', 'redis', 'mysql', 'tikv', 'postgres', 'badgerdb', 'mariadb']
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18.x'

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go
          restore-keys: |
            ${{ runner.os }}-go

      - name: Build linux target
        run: |
          make juicefs 
        shell: bash

      - name: Prepare meta db
        run: | 
          if [ "${{matrix.meta}}" == "mysql" ]; then
            sudo /etc/init.d/mysql start
          elif [ "${{matrix.meta}}" == "redis" ]; then
            sudo apt-get install -y redis-tools redis-server
          elif [ "${{matrix.meta}}" == "tikv" ]; then
            curl --proto '=https' --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh
            source /home/runner/.bash_profile
            source /home/runner/.profile
            tiup playground --mode tikv-slim &
            sleep 5
          elif [ "${{matrix.meta}}" == "badgerdb" ]; then
            sudo go get github.com/dgraph-io/badger/v3
          elif [ "${{matrix.meta}}" == "mariadb" ]; then
            docker run -p 127.0.0.1:3306:3306  --name mdb -e MARIADB_ROOT_PASSWORD=root -d mariadb:latest
          elif [ "${{matrix.meta}}" == "tidb" ]; then
            curl --proto '=https' --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh
            source /home/runner/.profile
            tiup playground 5.4.0 &
            sleep 120
            mysql -h127.0.0.1 -P4000 -uroot -e "set global tidb_enable_noop_functions=1;"
          fi

      - name: Test
        run: |
          echo meta is: ${{matrix.meta}}
          if [ "${{matrix.meta}}" == "postgres" ]; then
            meta_url="postgres://postgres:postgres@127.0.0.1:5432/sync_test?sslmode=disable" 
          elif [ "${{matrix.meta}}" == "mysql" ]; then
            meta_url="mysql://root:root@(127.0.0.1)/sync_test"
          elif [ "${{matrix.meta}}" == "redis" ]; then
            meta_url="redis://127.0.0.1:6379/1"
          elif [ "${{matrix.meta}}" == "sqlite3" ]; then
            meta_url="sqlite3://sync-test.db"
          elif [ "${{matrix.meta}}" == "tikv" ]; then
            meta_url="tikv://127.0.0.1:2379/load_test"
          elif [ "${{matrix.meta}}" == "badgerdb" ]; then
            meta_url="badger://load_test"
          elif [ "${{matrix.meta}}" == "mariadb" ]; then
            meta_url="mysql://root:root@(127.0.0.1)/load_test"
          elif [ "${{matrix.meta}}" == "tidb" ]; then
            meta_url="mysql://root:@(127.0.0.1:4000)/load_test"
          else
            echo "<FATAL>: meta ${{matrix.meta}} is not supported"
            exit 1
          fi
          echo meta_url is: $meta_url
          mount_point=/tmp/juicefs-load-test
          wget -q https://s.juicefs.com/static/bench/2M_emtpy_files.dump.gz
          gzip -dk  2M_emtpy_files.dump.gz
          load_file=2M_emtpy_files.dump
          
          db_name=$(basename $meta_url | awk -F? '{print $1}')
          if [[ "$meta_url" == mysql* ]]; then
            user=$(echo $meta_url |  awk -F/ '{print $3}' | awk -F@ '{print $1}' | awk -F: '{print $1}')
            password=$(echo $meta_url |  awk -F/ '{print $3}' | awk -F@ '{print $1}' | awk -F: '{print $2}')
            test -n "$password" && password="-p$password" || password=""
            host=$(basename $(dirname $meta_url) | awk -F@ '{print $2}'| sed 's/(//g' | sed 's/)//g' | awk -F: '{print $1}')
            port=$(basename $(dirname $meta_url) | awk -F@ '{print $2}'| sed 's/(//g' | sed 's/)//g' | awk -F: '{print $2}')
            test -z "$port" && port="3306" 
            mysql -u$user $password -h $host -P $port -e "drop database if exists $db_name; create database $db_name;" 
          elif [[ "$meta_url" == postgres* ]]; then
            export PGPASSWORD="postgres"
            printf "\set AUTOCOMMIT on\ndrop database if exists $db_name; create database $db_name; " |  psql -U postgres -h localhost
            printf "\set AUTOCOMMIT on\nALTER DATABASE $db_name SET DEFAULT_TRANSACTION_ISOLATION TO '$isolation_level';" |  psql -U postgres -h localhost
          fi
          echo `date`, start load
          sudo ./juicefs load $meta_url $load_file
          echo `date`, finish load
          echo `date`, start dump
          sudo ./juicefs dump $meta_url dump.json
          echo `date`, finish dump
          sudo ./juicefs mount $meta_url $mount_point -d

      - name: log
        if: ${{ always() }}
        shell: bash
        run: | 
          tail -300 /var/log/juicefs.log
          grep "<FATAL>:" /var/log/juicefs.log && exit 1 || true

      - name: Send Slack Notification
        if: ${{ failure() }}
        uses: juicedata/slack-notify-action@main
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID_FOR_PR_CHECK_NOTIFY }}"
          slack_bot_token: "${{ secrets.SLACK_BOT_TOKEN }}"  
          
      - name: Setup upterm session
        if: ${{ failure() }}
        timeout-minutes: 1
        uses: lhotari/action-upterm@v1