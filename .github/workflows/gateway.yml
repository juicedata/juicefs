name: "gateway-test"

on:
  push:
    branches: 
      - release-**
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    #The branches below must be a subset of the branches above
    branches: 
      - release-**
    paths-ignore:
      - 'docs/**'
      - '**.md'
  workflow_dispatch:

jobs:
  gateway:
    strategy:
      fail-fast: false
      matrix:
        meta: [  'sqlite3', 'redis','tikv', 'badgerdb',  'etcd']
        file_size: ['100M']
        isolation_level: ['']
        include:
          - meta: 'mariadb'
            file_size: '100M'
            isolation_level: "read committed"

          - meta: 'mysql'
            file_size: '100M'
            isolation_level: "read committed"
          - meta: 'mysql'
            file_size: '100M'
            isolation_level: "repeatable read"
          - meta: 'mysql'
            file_size: '100M'
            isolation_level: "serializable"

          - meta: 'postgres'
            file_size: '100M'
            isolation_level: "read committed"
          - meta: 'postgres'
            file_size: '100M'
            isolation_level: "repeatable read"
          - meta: 'postgres'
            file_size: '100M'
            isolation_level: "serializable"

          - meta: 'tidb'
            file_size: '100M'
            isolation_level: "read committed"
          - meta: 'tidb'
            file_size: '100M'
            isolation_level: "repeatable read"

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps: 
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18.x'

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go
          restore-keys: |
            ${{ runner.os }}-go

      - name: Build linux target
        run: |
          #if it is self ruuner
          hostname | grep bench && export GOPATH=/usr/local/go && export HOME=/root
          make juicefs 
          #wget -q https://github.com/juicedata/juicefs/releases/download/v1.0.0-beta3/juicefs-1.0.0-beta3-linux-amd64.tar.gz
          #tar -xzf juicefs-1.0.0-beta3-linux-amd64.tar.gz
        shell: bash

      - name: Set meta url
        id: vars
        run: | 
          echo meta is: ${{matrix.meta}}
          if [ "${{matrix.meta}}" == "postgres" ]; then
            meta_url="postgres://postgres:postgres@127.0.0.1:5432/sync_test?sslmode=disable" 
          elif [ "${{matrix.meta}}" == "mysql" ]; then
            meta_url="mysql://root:root@\\(127.0.0.1\\)/sync_test"
          elif [ "${{matrix.meta}}" == "redis" ]; then
            meta_url="redis://127.0.0.1:6379/1"
          elif [ "${{matrix.meta}}" == "sqlite3" ]; then
            meta_url="sqlite3://sync-test.db"
          elif [ "${{matrix.meta}}" == "tikv" ]; then
            meta_url="tikv://127.0.0.1:2379/load_test"
          elif [ "${{matrix.meta}}" == "badgerdb" ]; then
            meta_url="badger://load_test"
          elif [ "${{matrix.meta}}" == "mariadb" ]; then
            meta_url="mysql://root:root@\\(127.0.0.1\\)/test"
          elif [ "${{matrix.meta}}" == "tidb" ]; then
            meta_url="mysql://root:@\\(127.0.0.1:4000\\)/load_test"
          elif [ "${{matrix.meta}}" == "etcd" ]; then
            meta_url="etcd://localhost:2379/jfs"
          elif [ "${{matrix.meta}}" == "ob" ]; then
            meta_url="mysql://root:@\\(127.0.0.1:2881\\)/test"
          else
            echo "<FATAL>: meta ${{matrix.meta}} is not supported"
            exit 1
          fi
          echo meta_url is: $meta_url
          echo ::set-output name=meta_url::$meta_url

      - name: Start meta
        run: | 
          if [ "${{matrix.meta}}" == "mysql" ]; then
            sudo /etc/init.d/mysql start
          elif [ "${{matrix.meta}}" == "redis" ]; then
            sudo apt-get install -y redis-tools redis-server
          elif [ "${{matrix.meta}}" == "tikv" ]; then
            curl --proto '=https' --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh
            source /home/runner/.bash_profile
            source /home/runner/.profile
            tiup playground --mode tikv-slim &
            sleep 5
          elif [ "${{matrix.meta}}" == "badgerdb" ]; then
            sudo go get github.com/dgraph-io/badger/v3
          elif [ "${{matrix.meta}}" == "mariadb" ]; then
            docker run -p 127.0.0.1:3306:3306  --name mdb -e MARIADB_ROOT_PASSWORD=root -d mariadb:latest
            sleep 10
          elif [ "${{matrix.meta}}" == "tidb" ]; then
            curl --proto '=https' --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh
            source /home/runner/.profile
            tiup playground 5.4.0 &
            sleep 120
            mysql -h127.0.0.1 -P4000 -uroot -e "set global tidb_enable_noop_functions=1;"
          elif [ "${{matrix.meta}}" == "etcd" ]; then
            sudo apt install etcd
          elif [ "${{matrix.meta}}" == "ob" ]; then
            docker rm obstandalone --force || echo "remove obstandalone failed"
            docker run -p 2881:2881 --name obstandalone -e MINI_MODE=1 -d oceanbase/oceanbase-ce
            sleep 60
            mysql -h127.0.0.1 -P2881 -uroot -e "ALTER SYSTEM SET _ob_enable_prepared_statement=TRUE;" 
          fi

      - name: Install tools
        run: | 
          wget -q https://dl.minio.io/client/mc/release/linux-amd64/mc
          chmod +x mc 
        shell: bash
        
      - name: create database
        shell: bash
        run: | 
          meta_url=${{ steps.vars.outputs.meta_url }}
          isolation_level="${{matrix.isolation_level}}"
          db_name=$(basename $meta_url | awk -F? '{print $1}')
          if [[ "$meta_url" == mysql* ]]; then
            user=$(echo $meta_url |  awk -F/ '{print $3}' | awk -F@ '{print $1}' | awk -F: '{print $1}')
            password=$(echo $meta_url |  awk -F/ '{print $3}' | awk -F@ '{print $1}' | awk -F: '{print $2}')
            test -n "$password" && password="-p$password" || password=""
            host=$(basename $(dirname $meta_url) | awk -F@ '{print $2}'| sed 's/(//g' | sed 's/)//g' | awk -F: '{print $1}')
            port=$(basename $(dirname $meta_url) | awk -F@ '{print $2}'| sed 's/(//g' | sed 's/)//g' | awk -F: '{print $2}')
            test -z "$port" && port="3306"
            echo user=$user, password=$password, host=$host, port=$port, db_name=$db_name, isolation_level=$isolation_level
            mysql -u$user $password -h $host -P $port -e "set global transaction isolation level $isolation_level;" 
            mysql -u$user $password -h $host -P $port -e "show variables like '%isolation%;'" 
            mysql -u$user $password -h $host -P $port -e "drop database if exists $db_name; create database $db_name;" 
          elif [[ "$meta_url" == postgres* ]]; then
            export PGPASSWORD="postgres"
            printf "\set AUTOCOMMIT on\ndrop database if exists $db_name; create database $db_name; " |  psql -U postgres -h localhost
            printf "\set AUTOCOMMIT on\nALTER DATABASE $db_name SET DEFAULT_TRANSACTION_ISOLATION TO '$isolation_level';" |  psql -U postgres -h localhost
          fi      

      - name: start gateway
        shell: bash
        run: |
          meta_url=${{ steps.vars.outputs.meta_url }}
          mp="/tmp/myjfs"
          volume="myjfs"
          export MINIO_ROOT_USER=minioadmin
          export MINIO_ROOT_PASSWORD=minioadmin
          ./juicefs format $meta_url $volume --trash-days 0
          if [[ "$meta_url" == badger* ]]; then
            ./juicefs gateway $meta_url localhost:8080 --no-usage-report /tmp/access1.log &
          else
            ./juicefs gateway $meta_url localhost:8080 --access-log /tmp/access1.log &
            #./juicefs gateway $meta_url localhost:9000 --access-log /tmp/access1.log &
            #./juicefs gateway $meta_url localhost:9001 --access-log /tmp/access2.log &
            #sudo cp .github/workflows/resources/load-balancer.conf /etc/nginx/conf.d/load-balancer.conf
            #sudo rm /etc/nginx/sites-enabled/default
            #sudo systemctl restart nginx
          fi
        
      - name: Sync with multiple process
        shell: bash
        run: |
          meta_url=${{ steps.vars.outputs.meta_url }}
          file_size=${{matrix.file_size}}
          if [ $file_size="100M" ]; then 
            file_count=5
          else
            file_count=2000
          fi
          threads=20
          mp=/tmp/myjfs
          volume=myjfs
          
          dd if=/dev/urandom of=file iflag=fullblock,count_bytes bs=4k count="$file_size" > /dev/null
          mkdir data
          for i in $(seq 1 $file_count); do
            cp file data/file$i
          done
          start=`date +%s`
          declare -a pids   
          ./juicefs sync --dirs data/  s3://minioadmin:minioadmin@localhost:8080/$volume/data/ --no-https -p $threads &
          pids+=($!)
          ./juicefs sync --dirs data/  s3://minioadmin:minioadmin@localhost:8080/$volume/data/ --no-https -p $threads &
          pids+=($!)
          ./juicefs sync --dirs data/  s3://minioadmin:minioadmin@localhost:8080/$volume/data/ --no-https -p $threads &
          pids+=($!)
          wait "${pids[@]}"
          rm -rf $HOME/.juicefs/cache/ || true
          # ./mc alias set minio http://localhost:9000 minioadmin minioadmin --api S3v4
          # ./mc mb minio/$volume
          # ./mc cp --recursive data/  minio/$volume/data
          end=`date +%s`
          time=$((end-start))
          echo time cost is: $time second
          killall juicefs 
          sleep 3
          ./juicefs mount -d $meta_url $mp
          diff -ur data/ $mp/data/ 
          echo "diff succeed"
          ./juicefs umount  $mp --force
        
      - name: Sync with empty dir
        run: |
          meta_url=${{ steps.vars.outputs.meta_url }}
          threads=20
          mp=/tmp/myjfs
          volume=myjfs
          export MINIO_ROOT_USER=minioadmin
          export MINIO_ROOT_PASSWORD=minioadmin
          ./juicefs mdtest $meta_url test --dirs 10 --depth 2 --files 10 --threads 10 --no-usage-report
          ./juicefs gateway $meta_url localhost:8080 --access-log /tmp/access1.log &
          sleep 10
          mkdir emptydir
          declare -a pids  
          ./juicefs sync emptydir/ s3://minioadmin:minioadmin@localhost:8080/$volume/test/ --delete-dst --no-https -p $threads &
          pids+=($!)
          ./juicefs sync emptydir/ s3://minioadmin:minioadmin@localhost:8080/$volume/test/ --delete-dst --no-https -p $threads &
          pids+=($!)
          ./juicefs sync emptydir/ s3://minioadmin:minioadmin@localhost:8080/$volume/test/ --delete-dst --no-https -p $threads &
          pids+=($!)
          wait "${pids[@]}"
          killall juicefs
          sleep 3
          ./juicefs mount -d $meta_url $mp
          [ -d "$mp/test/" ] && exit 1 
          ./juicefs umount  $mp --force
        shell: bash

      - name: log
        if: ${{ always() }}
        shell: bash
        run: | 
          if [ -f ~/.juicefs/juicefs.log ]; then
            tail -300 ~/.juicefs/juicefs.log
            grep "<FATAL>:" ~/.juicefs/juicefs.log && exit 1 || true
          fi

      - name: Send Slack Notification
        if: ${{ failure() }}
        uses: juicedata/slack-notify-action@main
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID_FOR_PR_CHECK_NOTIFY }}"
          slack_bot_token: "${{ secrets.SLACK_BOT_TOKEN }}"  

      - name: Setup upterm session
        if: ${{ failure() }}
        timeout-minutes: 1
        uses: lhotari/action-upterm@v1