name: "pjdfstest"

on:
  push:
    branches:
      - 'main'
      - 'release-**'
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    #The branches below must be a subset of the branches above
    branches:
      - 'main'
      - 'release-**'
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '.github/**'
  schedule:
    - cron:  '0 16 * * *'
  workflow_dispatch:

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    steps:
      - id: set-matrix
        run: |
          echo "github.event_name is ${{github.event_name}}"
          echo "GITHUB_REF_NAME is ${GITHUB_REF_NAME}"
          if [ "${{github.event_name}}" == "schedule"  ]; then
            echo '::set-output name=meta_matrix::[ 'sqlite3', 'redis', 'mysql', 'tikv', 'tidb', 'postgres', 'badger', 'mariadb', 'fdb']'
          else
            echo '::set-output name=meta_matrix::["redis"]'
          fi
    outputs:
      meta_matrix: ${{ steps.set-matrix.outputs.meta_matrix }}

  pjdfstest:
    needs: build-matrix
    strategy:
      fail-fast: false
      matrix:
        # [ 'sqlite3', 'redis', 'mysql', 'tikv', 'tidb', 'postgres', 'badger', 'mariadb', 'fdb']
        meta: ${{ fromJson(needs.build-matrix.outputs.meta_matrix) }}
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18.x'

      # - name: Set up Docker
      #   uses: docker-practice/actions-setup-docker@master

      - uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: '5.34'

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go
          restore-keys: |
            ${{ runner.os }}-go

      - name: Build linux target
        run: |
          if [ "${{matrix.meta}}" == "fdb" ]; then
            echo "build juicefs.fdb"
            wget -q https://github.com/apple/foundationdb/releases/download/6.3.23/foundationdb-clients_6.3.23-1_amd64.deb
            sudo dpkg -i foundationdb-clients_6.3.23-1_amd64.deb
            make juicefs.fdb
            mv juicefs.fdb juicefs
          else
            echo "build juicefs"
            make juicefs 
          fi

      - name: Prepare meta db
        run: | 
          chmod +x .github/scripts/start_meta_engine.sh
          source .github/scripts/start_meta_engine.sh
          start_meta_engine ${{matrix.meta}}
          meta_url=$(get_meta_url ${{matrix.meta}})
          create_database $meta_url

      - name: Juicefs Format
        run: |
          source .github/scripts/start_meta_engine.sh
          meta_url=$(get_meta_url ${{matrix.meta}})
          sudo ./juicefs format $meta_url --trash-days 0 pics

      - name: Juicefs Mount
        run: |
          source .github/scripts/start_meta_engine.sh
          meta_url=$(get_meta_url ${{matrix.meta}})
          # sudo mkdir /var/jfs
          # sudo chmod 777 /var/jfs
          sudo ./juicefs mount -d $meta_url /tmp/jfs --no-usage-report &
          sleep 5
          if [ ! -f /tmp/jfs/.accesslog ]; then
            echo "<FATAL>: mount failed"
            exit 1
          fi

      - name: Pjdfstest
        run: |
          sudo apt-get update
          sudo apt-get install -y libtap-harness-archive-perl
          cd /tmp/jfs/
          git clone https://github.com/sanwan/pjdfstest.git
          cd pjdfstest
          autoreconf -ifs
          ./configure
          make pjdfstest
          sudo prove -rv tests/

      - name: log
        if: ${{ always() }}
        shell: bash
        run: | 
          if [ -f ~/.juicefs/juicefs.log ]; then
            tail -300 ~/.juicefs/juicefs.log
            grep "<FATAL>:" ~/.juicefs/juicefs.log && exit 1 || true
          fi
          if [ -f /var/log/juicefs.log ]; then
            tail -300 /var/log/juicefs.log
            grep "<FATAL>:" /var/log/juicefs.log && exit 1 || true
          fi

      - name: Send Slack Notification
        if: ${{ failure() }}
        uses: juicedata/slack-notify-action@main
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID_FOR_PR_CHECK_NOTIFY }}"
          slack_bot_token: "${{ secrets.SLACK_BOT_TOKEN }}"  

      - name: Setup upterm session
        if: ${{ failure() }}
        timeout-minutes: 1
        uses: lhotari/action-upterm@v1