name: "mdtest"

on:
  workflow_dispatch:
    inputs:
      dirs:
        description: 'directory width for each depth'
        required: true
        default: 10
      depth:
        description: 'depth of directory'
        required: true
        default: 10
      files:
        description: 'number of files for each directory'
        required: true
        default: 10
      threads:
        description: 'number of threads'
        required: true
        default: 10
      bytes:
        description: 'bytes of each file'
        required: true
        default: 0
jobs:
  mdtest:
    runs-on: [self-hosted, daily-build, bench-02]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set Variable
        id: vars
        run: |
          echo ::set-output name=META_URL::redis://mymaster,172.27.0.1,172.27.0.2,172.27.0.3:26379/7
          echo ::set-output name=MOUNT_POINT::/tmp/mdtest
          echo ::set-output name=BACKWARD_VERSIONS::1
          echo ::set-output name=PYROSCOPE_URL::http://172.27.0.1:4040

      - name: Build linux target
        run: |
          export GOPATH=/usr/local/go
          export HOME=/root
          make juicefs

      - name: Clean Before
        run: |
          rm /var/jfsCache/ -rf
          if [ -d ${{ steps.vars.outputs.MOUNT_POINT }} ]; then
            ./juicefs umount ${{ steps.vars.outputs.MOUNT_POINT }} || true
          fi
          UUID=$(./juicefs status ${{ steps.vars.outputs.META_URL }} | grep UUID | cut -d '"' -f 4)
          if [ -n "$UUID" ];then
            sudo ./juicefs destroy --force ${{ steps.vars.outputs.META_URL }} $UUID
          fi

      - name: Fio Benchmark 
        run: |
          export PYROSCOPE_AUTH_TOKEN="${{ secrets.PYROSCOPE_AUTH_TOKEN }}"  
          meta_url=${{ steps.vars.outputs.META_URL }}
          minio_url=http://172.27.0.2:9005/mdtest
          dirs=${{ github.event.inputs.dirs }}
          depth=${{ github.event.inputs.depth }}
          files=${{ github.event.inputs.files }}
          bytes=${{ github.event.inputs.bytes }}
          threads=${{ github.event.inputs.threads }}

          ./juicefs format --help | grep "trash-days" && trash_day="--trash-days 0" || trash_day=""
          ./juicefs --help | grep "pyroscope" && pyroscope="--pyroscope ${{steps.vars.outputs.PYROSCOPE_URL}}" || pyroscope=""
          ./juicefs format $trash_day --storage minio --bucket  $minio_url --access-key minioadmin --secret-key ${{ secrets.MINIO_SECRET_KEY }}  $meta_url mdtest
          ./juicefs mount -d $meta_url ${{ steps.vars.outputs.MOUNT_POINT }} --no-usage-report $pyroscope 
          ./juicefs mdtest $meta_url test --dirs $dirs --depth $depth --files $files --threads $threads --write $bytes

      - name: Clean After
        if: ${{always()}}
        run: |
          if [ -d ${{ steps.vars.outputs.MOUNT_POINT }} ]; then
            ./juicefs umount ${{ steps.vars.outputs.MOUNT_POINT }} || true
          fi
          UUID=$(./juicefs status ${{ steps.vars.outputs.META_URL }} | grep UUID | cut -d '"' -f 4)
          if [ -n "$UUID" ];then
            sudo ./juicefs destroy --force ${{ steps.vars.outputs.META_URL }} $UUID
          fi

      - name: Send Slack Notification
        if: ${{ failure() }}
        uses: juicedata/slack-notify-action@main
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID_FOR_PR_CHECK_NOTIFY }}"
          slack_bot_token: "${{ secrets.SLACK_BOT_TOKEN }}"  
