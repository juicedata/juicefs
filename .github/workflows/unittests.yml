name: "unittests"

on:
  push:
    branches:
      - 'release-*'
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    #The branches below must be a subset of the branches above
    branches:
      - 'main'
      - 'release-*'
    paths-ignore:
      - 'docs/**'
      - '**.md'
  workflow_dispatch:

jobs:
  unittests:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18.x'

      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install Packages
        run: |
          sudo apt install -y g++-multilib
          sudo apt install -y redis-server
          sudo apt install -y libacl1-dev
          sudo apt install -y attr

      - name: Juicefs Format
        run: |
          #sudo ./juicefs format  redis://127.0.0.1:6379/1 pics

      - name: Juicefs Mount
        run: |
          #sudo ./juicefs mount -d redis://127.0.0.1:6379/1 /jfs/ --enable-xattr --no-usage-report &


      - name: Prepare Database
        run: |
          sudo service mysql start
          sudo service postgresql start
          sudo chmod 777 /etc/postgresql/*/main/pg_hba.conf
          sudo sed  -i "s?local.*all.*postgres.*peer?local   all             postgres                                trust?" /etc/postgresql/*/main/pg_hba.conf
          cat /etc/postgresql/*/main/pg_hba.conf
          sudo service postgresql restart
          sudo mysql -uroot -proot -e "create database dev;"
          psql -c 'create database test;' -U postgres
          pwd
          echo "hello"
          wget -O install.sh https://tiup-mirrors.pingcap.com/install.sh
          wget -O rclone-v1.57.0-linux-amd64.zip --no-check-certificate https://downloads.rclone.org/v1.57.0/rclone-v1.57.0-linux-amd64.zip
          unzip rclone-v1.57.0-linux-amd64.zip -d .
          wget -O litmus-0.13.tar.gz http://www.webdav.org/neon/litmus/litmus-0.13.tar.gz && tar -zxvf litmus-0.13.tar.gz -C .
          cd litmus-0.13 && ./configure && make && cd -
          pwd
          wget -O etcd-v3.5.2-linux-amd64.tar.gz  https://github.com/etcd-io/etcd/releases/download/v3.5.2/etcd-v3.5.2-linux-amd64.tar.gz
          tar -zxf etcd-v3.5.2-linux-amd64.tar.gz -C .
          sh install.sh && source ~/.bash_profile && nohup tiup playground --mode tikv-slim >> output.log 2>&1 &
          docker run -d -p 9000:9000 -p 9001:9001 -e "MINIO_ROOT_USER=testUser" -e "MINIO_ROOT_PASSWORD=testUserPassword" quay.io/minio/minio:RELEASE.2022-01-25T19-56-04Z server /data --console-address ":9001"
          go install github.com/minio/mc@RELEASE.2022-01-07T06-01-38Z && mc config host add local http://127.0.0.1:9000 testUser testUserPassword && mc mb local/testbucket
          nohup rclone-v1.57.0-linux-amd64/rclone serve webdav local --addr 127.0.0.1:9007 >> rclone.log 2>&1 &
          echo "hello2"
          #sudo chmod 777 /usr/share/apache*/conf/settings.xml
          #sudo sed -i "s?</settings>?<localRepository>/home/travis/.m2/repository</localRepository></settings>?" /usr/share/apache*/conf/settings.xml
          docker run -d --name sftp -p 2222:22  juicedata/ci-sftp
          echo "hello3"
          ls -lah
          echo "hello5"
          pwd
          make
          echo "hello6"
          redis-server -v
          sudo make -C fstests setup
          chmod +x travis-setup-hdfs.sh
          ./travis-setup-hdfs.sh
          for i in {2222,3306,5432,8020,9000,9007,2379} ; do echo "lsof port:"$i;sudo lsof -i :$i;if [ $? != 0 ];then sleep 5; else continue; fi;sudo lsof -i :$i; if [ $? != 0 ];then echo "service not ready, port:"$i; exit 1;fi; done
          sudo lsof -i :2379;if [ $? != 0 ];then echo "tikv is not ready";cat output.log;exit 1; fi


      - name: Unit Test
        run: |
          pwd
          sudo chmod 777 /var/jfsCache
          make test
          cat cov1.out >> coverage.txt
          cat cov2.out >> coverage.txt
          sudo DURATION=10 make -C fstests fsracer
          sudo ./juicefs umount /jfs || sudo lsof /jfs && sudo ./juicefs umount --force /jfs || true
          sudo ./juicefs gc localhost
          sudo ./juicefs fsck localhost



      - name: Send Slack Notification
        if: ${{ failure() }}
        uses: juicedata/slack-notify-action@main
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID_FOR_PR_CHECK_NOTIFY }}"
          slack_bot_token: "${{ secrets.SLACK_BOT_TOKEN }}"

      - name: Setup upterm session
        if: ${{ failure() }}
        uses: lhotari/action-upterm@v1