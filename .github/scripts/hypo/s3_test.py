import unittest
from s3 import S3Machine

class TestS3(unittest.TestCase):
    def test_s3(self):
        state = S3Machine()
        state.create_bucket('bucket1')
        state.create_bucket('bucket2')
        state.fput_object('bucket1', 'object1')
        state.fput_object('bucket1', 'object2')
        state.fput_object('bucket2', 'object1')
        state.fput_object('bucket2', 'object2')
        state.list_buckets()
        state.list_objects('bucket1')
        state.list_objects('bucket2')
        state.remove_object('bucket1:object1')
        state.remove_object('bucket1:object2')
        state.remove_bucket('bucket1')
        state.remove_bucket('bucket2')
        state.teardown()

    def test_s3_2(self):
        state = S3Machine()
        v1 = state.create_bucket(bucket_name='lwre')
        v2 = state.create_bucket(bucket_name='imrr')
        v3 = state.fput_object(bucket_name=v1, object_name='zqqs')
        state.get_bucket_policy(bucket_name=v1)
        state.delete_bucket_policy(bucket_name=v2)
        state.put_object(bucket_name=v1, data=b'\x1c', object_name='mvtl', part_size=8388608, use_part_size=False)
        state.teardown()

    def test_s3_policy(self):
        state = S3Machine()
        state.list_buckets()
        v1 = state.create_bucket(bucket_name='bqgl')
        state.list_buckets()
        state.list_buckets()
        state.set_bucket_policy(bucket_name=v1, policy={'Statement': [{'Effect': 'Deny',
        'Principal': {'AWS': '*'},
        'Action': ['s3:PutObject'],
        'Resource': 'arn:aws:s3:::{{bucket}}/*'}]})
        state.remove_bucket(bucket_name=v1)
        state.teardown()

    def test_s3_4(self):
        state = S3Machine()
        state.do_remove_group(group_name='group1')
        state.add_user(access_key='user1', secret_key='xqgjzgqh')
        state.do_remove_group(group_name='group2')
        v1 = state.create_bucket(bucket_name='mdvp')
        state.list_buckets()
        state.list_objects(bucket_name=v1, include_user_meta=True, include_version=False, prefix=None, recursive=True, start_after=None, use_url_encoding_type=True)
        state.remove_bucket(bucket_name=v1)
        state.do_remove_group(group_name='group2')
        state.list_buckets()
        state.do_remove_group(group_name='group1')
        state.list_buckets()
        state.do_remove_group(group_name='group1')
        v2 = state.create_bucket(bucket_name='dcgs')
        v3 = state.put_object(bucket_name=v2, data=b'', object_name='ieao', part_size=5242880, use_part_size=False)
        state.list_objects(bucket_name=v2, include_user_meta=True, include_version=False, prefix='y', recursive=False, start_after=None, use_url_encoding_type=False)
        state.add_user(access_key='user2', secret_key='kirrzyir')
        state.stat_object(obj=v3)
        v4 = state.put_object(bucket_name=v2, data=b'', object_name='pojb', part_size=8388608, use_part_size=False)
        state.list_objects(bucket_name=v2, include_user_meta=True, include_version=False, prefix='s', recursive=True, start_after='sqwx', use_url_encoding_type=False)
        v5 = state.remove_bucket(bucket_name=v2)
        v6 = state.put_object(bucket_name=v5, data=b'\xbb}\x01\x9c|', object_name='euof', part_size=5242880, use_part_size=False)
        state.add_user(access_key='user1', secret_key='ryvklyws')
        state.add_user(access_key='user3', secret_key='enrmencg')
        v7 = state.fput_object(bucket_name=v5, object_name='xeje')
        v8 = state.create_bucket(bucket_name='feou')
        v9 = state.fput_object(bucket_name=v8, object_name='uhvt')
        v10 = state.put_object(bucket_name=v5, data=b'', object_name='wrys', part_size=5242880, use_part_size=False)
        v11 = state.fput_object(bucket_name=v5, object_name='yomz')
        state.add_user(access_key='user2', secret_key='qpmfiwpp')
        state.list_buckets()
        v12 = state.put_object(bucket_name=v5, data=b'\x9c\x1b\xc8e\xff\xfe\x01\xa2\x10\xf4', object_name='xdam', part_size=5242880, use_part_size=True)
        state.stat_object(obj=v4)
        v13 = state.remove_bucket(bucket_name=v5)
        state.do_remove_group(group_name='group3')
        state.list_objects(bucket_name=v13, include_user_meta=False, include_version=False, prefix=None, recursive=True, start_after=None, use_url_encoding_type=True)
        v14 = state.create_bucket(bucket_name='ezov')
        state.list_objects(bucket_name=v14, include_user_meta=False, include_version=False, prefix='h', recursive=True, start_after='ofhd', use_url_encoding_type=False)
        state.teardown()

if __name__ == '__main__':
    unittest.main()