/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/juicedata/juicefs/sdk/java/libjfs */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 19 "main.go"


 #include <unistd.h>
 #include <inttypes.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
 #include <utime.h>
 #include <stdlib.h>
 void jfs_callback(const char *msg);

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void jfs_set_logger(void* cb);
extern GoUintptr jfs_init(char* cname, char* jsonConf, char* user, char* group, char* superuser, char* supergroup);
extern void jfs_update_uid_grouping(GoUintptr h, char* uidstr, char* grouping);
extern GoInt jfs_term(GoInt pid, GoUintptr h);
extern GoInt jfs_open(GoInt pid, GoUintptr h, char* cpath, GoUintptr lenPtr, GoInt flags);
extern GoInt jfs_access(GoInt pid, GoUintptr h, char* cpath, GoInt flags);
extern GoInt jfs_create(GoInt pid, GoUintptr h, char* cpath, GoUint16 mode, GoUint16 umask);
extern GoInt jfs_mkdir(GoInt pid, GoUintptr h, char* cpath, GoUint16 mode, GoUint16 umask);
extern GoInt jfs_delete(GoInt pid, GoUintptr h, char* cpath);
extern GoInt jfs_rmr(GoInt pid, GoUintptr h, char* cpath);
extern GoInt jfs_rename(GoInt pid, GoUintptr h, char* oldpath, char* newpath);
extern GoInt jfs_truncate(GoInt pid, GoUintptr h, char* path, GoUint64 length);
extern GoInt jfs_setXattr(GoInt pid, GoUintptr h, char* path, char* name, GoUintptr value, GoInt vlen, GoInt mode);
extern GoInt jfs_getXattr(GoInt pid, GoUintptr h, char* path, char* name, GoUintptr buf, GoInt bufsize);
extern GoInt jfs_listXattr(GoInt pid, GoUintptr h, char* path, GoUintptr buf, GoInt bufsize);
extern GoInt jfs_removeXattr(GoInt pid, GoUintptr h, char* path, char* name);
extern GoInt jfs_symlink(GoInt pid, GoUintptr h, char* target, char* link);
extern GoInt jfs_readlink(GoInt pid, GoUintptr h, char* link, GoUintptr buf, GoInt bufsize);
extern GoInt jfs_stat1(GoInt pid, GoUintptr h, char* cpath, GoUintptr buf);
extern GoInt jfs_lstat1(GoInt pid, GoUintptr h, char* cpath, GoUintptr buf);
extern GoInt jfs_summary(GoInt pid, GoUintptr h, char* cpath, GoUintptr buf);
extern GoInt jfs_statvfs(GoInt pid, GoUintptr h, GoUintptr buf);
extern GoInt jfs_chmod(GoInt pid, GoUintptr h, char* cpath, mode_t mode);
extern GoInt jfs_utime(GoInt pid, GoUintptr h, char* cpath, GoInt64 mtime, GoInt64 atime);
extern GoInt jfs_setOwner(GoInt pid, GoUintptr h, char* cpath, char* owner, char* group);
extern GoInt jfs_listdir(GoInt pid, GoUintptr h, char* cpath, GoInt offset, GoUintptr buf, GoInt bufsize);
extern GoInt jfs_concat(GoInt pid, GoUintptr h, char* _dst, GoUintptr buf, GoInt bufsize);
extern GoInt64 jfs_lseek(GoInt pid, GoInt fd, GoInt64 offset, GoInt whence);
extern GoInt jfs_read(GoInt pid, GoInt fd, GoUintptr cbuf, GoInt count);
extern GoInt jfs_pread(GoInt pid, GoInt fd, GoUintptr cbuf, size_t count, off_t offset);
extern GoInt jfs_write(GoInt pid, GoInt fd, GoUintptr cbuf, size_t count);
extern GoInt jfs_flush(GoInt pid, GoInt fd);
extern GoInt jfs_fsync(GoInt pid, GoInt fd);
extern GoInt jfs_close(GoInt pid, GoInt fd);

#ifdef __cplusplus
}
#endif
